package Java_First_Level_Lecture_8;

public class App11 {

    public static void main(String[] args) {

        Shirt myRedShirt = new Shirt("My shirt", 25,
                500, 'R');

        Clothing cloth = new Shirt("My green shirt", 30,
                237, 'G');

        Trourses myTrousers = new Trourses("My trousers", 50,
                'B');

        myRedShirt.setName("My shirt");

        System.out.println(myRedShirt + "\n" + cloth);

        System.out.println("~~~~~~~~~~~~~~~~~~~~~~");

        System.out.println(myRedShirt);
        myRedShirt.wash();
        System.out.println(myRedShirt);
        System.out.println(cloth);
        cloth.wash();
        System.out.println(cloth);

        System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~");

        Laundry laundry = new Laundry();
        laundry.clean(myRedShirt, 40);
        laundry.clean(myTrousers, 40);
    }
    /*  Ссылочные переменные в Java разрешается инициализировать как объектами
    *   типа (класса) самой переменной, так и подтипа (подклсса)
    *
    *   В случае инициализации переменных объектами подтипа(подкласса),
    *   доступны лишь методы, объявленные в классе типа ссылочной переменной
    *
    *   Для получения доступа ко всем полям и методам объекта дочернего класса,
    *   необходимо использовать операцию приведения типа (нисходящее
    *   преобразование)
    *
    *                           ПОЛИМОРФИЗМ
    *   Полиморфизм - это возможность работать с несколькими типами так, как
    *   будто это один и тот же тип и в то же время поведение каждого типа
    *   будет уникальным в зависимости от его реализации. Тоесть один
    *   интерфейс - множество реализаций.
    *   Полиморфизм - один из четырёх основных принципов объектно-ориентированного
    *   программирования.
    *
    *   Подклассы могут определять уникальные характеристики а также наследовать
    *   и использовать функциональность родительского класса.
    *
    *   Полиморфический вызов - обращение производится через метод супер класса,
    *   но реальный объект - экземпляр подкласса
    *
    *                           ИНТЕРФЕЙСЫ
    *   Интерфейс - ссылочный тип данных, который может содержать лишь константы
    *   , сигнатуры методов и вложенные типы*(до Java SE 8); методы с
    *   реализацией (default и static).
    *
    *   Из интерфейсов нельзя создать объект (т.е. вызвать new). Они лишь
    *   могут быть либо реализованы в классах или расширены другими
    *   интерфейсами.
    *
    *   В Java любой класс может быть подклассом лишь одного класса, т.е.
    *   в общем случае в Java реализуется единичное наследование.
    *   При этом класс может реализовывать несколько интерфейсов.
    *   Таким образом использование интерфейсов - способ реализации
    *   множественного наследования.
    *
    *   Поэтому объект может "принадлежать" многим типам - типу своего класса
    *   , а также всех интерфейсов, которые он реализует.
    *
    *   По Java Code Convention название интерфейсов - деепричастия
    *   (суффикс - able)
    *
    *                           СОЗДАНИЕ ИНТЕРФЕЙСА
    *   Объявление интерфейса состоит из: модификатора доступа, ключевого
    *   слова "interface", имени интерфейса, списка родительских
    *   интерфейсов, разделённых запятыми и тела интерфейса.
    *
    *   Для интерфейсов, так же как и для классов применимы 2 модификатора
    *   доступа: "public" и package(default).
    *
    *   Интерфейс может наследовать другие интерфейсы, таким же способом
    *   как в случае классов (с помощью ключевого слова extends).
    *   Однако в отличае от классов интерфейс может наследовать любое
    *   количество других интерфейсов. При создании интерфейса через
    *   запятую указываются все родительские интерфейсы.
    *
    *   Тело интерфейса содержит методы, определяемые в нём.
    *
    *   Интерфейс может содержать объявление констант дополнительно к
    *   объявлению методов.*/
}